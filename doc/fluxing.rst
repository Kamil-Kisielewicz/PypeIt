*******
Fluxing
*******

Overview
========
The code matches a standard star to you science target based on
the time(s) of observation. If multiple standard stars are
supplied as calibration frames, PypeIt selects the standard star
observed closest in time to your science observation for fluxing.

.. _fluxspec-script:

Flux Spec Script
================

It may be preferential to flux the spectra after the main reduction
(i.e. run_pypeit).  PypeIt provides a script to guide the process.
Here is the usage::

    usage: pypeit_flux_spec [-h] [--std_file STD_FILE] [--std_obj STD_OBJ]
                           [--sci_file SCI_FILE] [--instr INSTR]
                           [--sensfunc_file SENSFUNC_FILE] [--flux_file FLUX_FILE]
                           [--plot] [--multi_det MULTI_DET]
                           steps

    Parse

    positional arguments:
      steps                 Steps to perform [sensfunc,flux]

    optional arguments:
      -h, --help            show this help message and exit
      --std_file STD_FILE   File containing the standard 1d spectrum
      --std_obj STD_OBJ     Standard star identifier, e.g. O479-S5009-D01-I0023
      --sci_file SCI_FILE   File containing the science 1d spectra
      --instr INSTR         Instrument name (required to generate sensfunc)
      --sensfunc_file SENSFUNC_FILE
                            File containing the sensitivity function (input or
                            output)
      --flux_file FLUX_FILE
                            Output filename for fluxed science spectra
      --plot                Show the sensitivity function?
      --multi_det MULTI_DET
                            Multiple detectors (e.g. 3,7 for DEIMOS)


We suggest you first generate the sensitivity function.  Here is an
example command::

    pypeit_flux_spec sensfunc --std_file=spec1d_Feige66_KASTb_2015May20T041246.96.fits  --instr=shane_kast_blue --sensfunc_file=tmp.yaml

This writes the sensitivity function to tmp.yaml.  You can inspect it visually
by running with --plot.

You can then flux any spec1d file with a command like::

    pypeit_flux_spec flux --sci_file=spec1d_J1217p3905_KASTb_2015May20T045733.56.fits --sensfunc_file=tmp.yaml --flux_file=tmp.fits

The output file with flam and flam_var arrays is given by --flux_file.

For instruments like DEIMOS where the spectrum runs across multiple
detectors, one can splice the spectra together to generate one
sensfunc, e.g.::

    pypeit_flux_spec sensfunc --std_file=spec1d_G191B2B_DEIMOS_2017Sep14T152432.fits  --instr=keck_deimos --sensfunc_file=sens.yaml --multi_det=3,7

This should work on any spec1d science object with overlapping wavelength coverage.

.. _fluxspec-class:

FluxSpec Class
==============

The guts of the flux algorithms are guided by the FluxSpec class.
See the
`FluxSpec.ipynb <https://github.com/pypeit/pypeit/blob/master/doc/nb/FluxSpec.ipynb>`_
Notebook on GitHub (in doc/nb) for some usage examples, although
we recommend that most users use the :ref:`fluxspec-script`.


Sensitivity Function
====================
PypeIt uses the CALSPEC calibration database, which can be found
at http://stsci.edu/hst/observatory/crds/calspec.html for flux
calibrations, specifically, generating the sensitivity function
(see also :doc:`standards`).

The sensitivity function is generated by dividing the standard
star's flux, which is loaded in by PypeIt from CALSPEC, by the
standard star's counts per second. This is then multiplied to the
science object's counts per second to yield a fluxed science
spectrum.

The sensitivity function is written to disk as a YAML file
in the MasterFrames folder with prefix MasterSensFunc.
There is only one file per setup (not per detector).  If one
has a previous file, this can be placed in the MasterFrames
folder to be loaded (one must turn on MasterFrame usage, e.g.
with the -m flag on run_pypeit).

Fluxing Output
==============

Science
-------
The resulting fluxed science spectrum, :math:`\rm f_\lambda`,
is given in units of :math:`10^{-17}\,\rm ergs/s/cm^2/Angstrom`
and is stored in the 'box_flam' extension of the extracted 1D
spectrum. If an optimal extraction was successful, there also
exists an 'opt_flam' extension in the 1D spectrum.

Standard
--------
The 1D extracted standard spectrum is also saved as an output
of the fluxing routine. The counts and fluxed standard spectrum
are available in the 'box_counts' and 'box_flam' extensions,
respectively. The fluxed spectrum saved here is the fluxed standard,
using the sensitivity function generated from itself (rather than
the archived fluxed standard star loaded from CALSPEC), and can be
examined and compared to the expected :math:`\rm f_\lambda` as a
sanity check.

Troubleshooting
===============

Problem with bspline knot
-------------------------
Things sometimes go wrong the fluxing and it commonly has to do with 
the bspline algorithm. If you reach a stop in the code with a message
that says "Problem with bspline knot" there are a couple things to check:

    - There are instances where there isn't data 
      between the knots. You can change the knot spacing by including 
      the following in your .pypeit file under the Reduce block::
        reduce skysub bspline everyn NUM
      where you adjust NUM. 
    - If your observation of the standard star is taken with a setup that 
      goes beyond the wavelength range of the version in data/standards/calspec.
    - If the wavelength solution is really bad it can manifest as problem in 
      bspline knot. If the issue isn't the spacing or wavelength coverage check
      the QA files to see if there is an issue in the wavelength solution. If 
      this is the case, check the :doc:`wave_calib` page for Troubleshooting 
      or open an issue on the GitHub repo.
